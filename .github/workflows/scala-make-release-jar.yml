name: scala-make-release-jar

on:
  workflow_call:
    inputs:
      jdk-version:
        required: false
        description: 'jdk version'
        type: string
        default: '8'
      build_path:
        type: string
        description: 'Ubicación donde se encontrará el sistema compilado (without leading slash)'
        default: 'target'
        required: false
      name:
        description: name
        required: true
        type: string
      artifact_extension:
        description: 'Extensión del artifacto (ej: .jar)'
        type: string
        default: '.jar'
        required: true
    secrets:
      SYSADMIN_PAT:
        required: true
      NEXUS_USER:
        required: true
      NEXUS_PASSWORD:
        required: true
      DEPLOY_KEY:
        required: true
      DEPLOY_IP:
        required: true
      DEPLOY_PORT:
        required: true
      DEPLOY_USER:
        required: true
      JENKINS_URL:
        required: true
      JENKINS_DEPLOY_JOB:
        required: true
      JENKINS_USER:
        required: true
      JENKINS_TOKEN:
        required: true
      PUBLISHER_PATH:
        required: true

jobs:
  default-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TZ: America/Montevideo
      NEXUS_USER: ${{ secrets.NEXUS_USER }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    steps:
      - name: Checkout / Setup JDK / sbt-cache
        uses: BQN-UY/action_checkout_jdk_sbt-cache@main
        with:
          token: ${{ secrets.SYSADMIN_PAT }}
          jdk-version: ${{ inputs.jdk-version }}

      - name: Get current version
        run: |
          versionString=$(awk '/ThisBuild \/ version := /{print $NF}' version.sbt)
          echo "VERSION=`echo ${versionString:1:-1} | sed 's/-SNAPSHOT//g'`" >> $GITHUB_ENV
      
      # - name: Release
      #   run: |
      #     git config --global user.name github-actions
      #     git config --global user.email github-actions@github.com
      #     sbt "release with-defaults"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{inputs.name}}"
          path: "${{inputs.build_path}}/${{inputs.name}}${{inputs.artifact_extension}}"
          retention-days: 1
          if-no-files-found: error 

      - name: Publish release notes
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          publish: true
          prerelease: false
          name: "v${{ env.VERSION }}"
          tag: "v${{ env.VERSION }}"
          version: "v${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  hotfix-release:
    if: startsWith(github.ref, 'refs/heads/v')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TZ: America/Montevideo
      NEXUS_USER: ${{ secrets.NEXUS_USER }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    steps:
      - name: Checkout / Setup JDK / sbt-cache
        uses: BQN-UY/action_checkout_jdk_sbt-cache@main
        with:
          token: ${{ secrets.SYSADMIN_PAT }}
          jdk-version: ${{ inputs.jdk-version }}

      # - name: Release Hotfix
      #   run: |
      #     git config --global user.name github-actions
      #     git config --global user.email github-actions@github.com
      #     sbt release-hotfix

      - name: Build
        run: sbt assembly

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.SYSADMIN_PAT }}
          branch: ${{ github.ref }}
          tags: true
          force: true

      - name: Get current version
        run: |
          versionString=$(awk '/ThisBuild \/ version := /{print $NF}' version.sbt)
          echo "VERSION=`echo ${versionString:1:-1} | sed 's/-SNAPSHOT//g'`" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{inputs.name}}-${{env.VERSION}}.${{inputs.artifact_extension}}"
          path: "${{inputs.build_path}}/${{inputs.name}}-${{env.VERSION}}.${{inputs.artifact_extension}}"
          retention-days: 1
          if-no-files-found: error 
      
      - name: Publish hotfix notes
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          publish: true
          prerelease: false
          commitish: main
          name: "v${{ env.VERSION }}"
          tag: "v${{ env.VERSION }}"
          version: "v${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: PR to main
        uses: vsoch/pull-request-action@1.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.SYSADMIN_PAT }}
          # PULL_REQUEST_FROM_BRANCH: ${{ github.ref }}
          PULL_REQUEST_BRANCH: "main"
          PULL_REQUEST_TITLE: "[hotfix] Update main from ${{ env.VERSION }}"
          PULL_REQUEST_BODY: "**ALERTA**: Siempre que se resuelva conflictos se debe aceptar la version **#.#.#-SNAPSHOT** de main"
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

  deploy:
    runs-on: ubuntu-latest
    if: always() && contains(join(needs.*.result, ','), 'success')
    needs: [ default-release, hotfix-release ]
    timeout-minutes: 10
    env:
      TZ: America/Montevideo
      NEXUS_USER: ${{ secrets.NEXUS_USER }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    steps:
      - name: Checkout / Setup JDK / sbt-cache
        uses: BQN-UY/action_checkout_jdk_sbt-cache@main
        with:
          token: ${{ secrets.SYSADMIN_PAT }}
          jdk-version: ${{ inputs.jdk-version }}

      - name: Get current version
        run: |
          versionString=$(awk '/ThisBuild \/ version := /{print $NF}' version.sbt)
          echo "VERSION=`echo ${versionString:1:-1} | cut -d"-" -f1`" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{inputs.name}}"
          path: "${{inputs.build_path}}/${{inputs.name}}${{ inputs.artifact_extension }}"
          retention-days: 1
          if-no-files-found: error

      - name: Storage Jar
        uses: ./.github/actions/store-artifact
        with:
          publisher_path: ${{ secrets.PUBLISHER_PATH }}
          artifact_path: '${{inputs.build_path}}/${{inputs.name}}${{ inputs.artifact_extension }}'
          artifact_name: ${{ inputs.name }}
          version: ${{ env.VERSION }}
          DEPLOY_IP: ${{ secrets.DEPLOY_IP }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}

      ## Llamamos al job de jenkins app-dispatcher
      - name: Executing deloy script
        uses: ./.github/actions/call-jenkins
        with:
          deploy_ip: ${{ secrets.DEPLOY_IP }}
          deploy_port: ${{ secrets.DEPLOY_PORT }}
          deploy_user: ${{ secrets.DEPLOY_USER }}
          jenkins_url: ${{ secrets.JENKINS_URL }}
          jenkins_job_name: ${{ secrets.JENKINS_DEPLOY_JOB }} # Usamos el valor de tu secret
          jenkins_user: ${{ secrets.JENKINS_USER }}
          sistema: ${{ inputs.name }}
          version: ${{ env.VERSION }}
          deploy_key: ${{ secrets.DEPLOY_KEY }}
          jenkins_token: ${{ secrets.JENKINS_TOKEN }}