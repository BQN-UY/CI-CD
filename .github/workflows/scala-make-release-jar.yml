name: scala-make-release-jar

on:
  workflow_call:
    inputs:
      jdk-version:
        required: false
        description: 'jdk version'
        type: string
        default: '8'
      build_path:
        type: string
        description: 'Ubicación donde se encontrará el sistema compilado (without leading slash)'
        default: 'target'
        required: false
      name:
        description: name
        required: true
        type: string
      artifact_extension:
        description: 'Extensión del artifacto (ej: .jar)'
        type: string
        default: '.jar'
        required: true
    secrets:
      SYSADMIN_PAT:
        required: true
      NEXUS_USER:
        required: true
      NEXUS_PASSWORD:
        required: true
      DEPLOY_KEY:
        required: true
      DEPLOY_IP:
        required: true
      DEPLOY_PORT:
        required: true
      DEPLOY_USER:
        required: true
      JENKINS_URL:
        required: true
      JENKINS_DEPLOY_JOB:
        required: true
      JENKINS_USER:
        required: true
      JENKINS_TOKEN:
        required: true
      PUBLISHER_PATH:
        required: true

jobs:
  default-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TZ: America/Montevideo
      NEXUS_USER: ${{ secrets.NEXUS_USER }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    steps:
      - name: Checkout / Setup JDK / sbt-cache
        uses: BQN-UY/action_checkout_jdk_sbt-cache@main
        with:
          token: ${{ secrets.SYSADMIN_PAT }}
          jdk-version: ${{ inputs.jdk-version }}

      - name: Get current version and calculate release version
        run: |
          # Obtener la versión con -SNAPSHOT desde version.sbt
          # Busca la línea 'ThisBuild / version := "..."' o 'version := "..."'
          # Extrae la cadena entre comillas
          currentVersion=$(awk '/(ThisBuild \/ )?version := / {print $NF}' version.sbt | sed 's/"//g')
          echo "CURRENT_VERSION=$currentVersion" >> $GITHUB_ENV

          # Calcular la versión de release (sin -SNAPSHOT)
          releaseVersion=$(echo "$currentVersion" | sed 's/-SNAPSHOT//g')
          echo "RELEASE_VERSION=$releaseVersion" >> $GITHUB_ENV

          echo "Current version: $currentVersion"
          echo "Release version: $releaseVersion"

      - name: Build (sbt assembly)
        run: sbt assembly
        # Este paso generará el JAR con el nombre que incluye -SNAPSHOT

      - name: Rename artifact
        run: |
          # Directorio donde sbt assembly guarda el JAR (target/scala-2.13 por defecto)
          # Ajusta la ruta si tu assembly lo guarda en otro lugar
          # Buscamos el archivo generado por assembly que contiene la CURRENT_VERSION
          jarFile="${{ inputs.build_path }}/scala-2.13/${{ inputs.name }}-${{ env.CURRENT_VERSION }}${{ inputs.artifact_extension }}"
          newJarFile="${{ inputs.build_path }}/${{ inputs.name }}-${{ env.RELEASE_VERSION }}${{ inputs.artifact_extension }}"

          echo "Renaming $jarFile to $newJarFile"
          mv "$jarFile" "$newJarFile"
          ls ${{ inputs.build_path }}/ # Listar para verificar el renombre

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{inputs.name}}-${{env.RELEASE_VERSION}}${{inputs.artifact_extension}}"
          # Usamos la ruta del archivo renombrado
          path: "${{inputs.build_path}}/${{inputs.name}}-${{env.RELEASE_VERSION}}${{inputs.artifact_extension}}"
          retention-days: 1
          if-no-files-found: error

      - name: Publish release notes
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          publish: true
          prerelease: false
          name: "v${{ env.RELEASE_VERSION }}"
          tag: "v${{ env.RELEASE_VERSION }}"
          version: "v${{ env.RELEASE_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  hotfix-release:
    if: startsWith(github.ref, 'refs/heads/v')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TZ: America/Montevideo
      NEXUS_USER: ${{ secrets.NEXUS_USER }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    steps:
      - name: Checkout / Setup JDK / sbt-cache
        uses: BQN-UY/action_checkout_jdk_sbt-cache@main
        with:
          token: ${{ secrets.SYSADMIN_PAT }}
          jdk-version: ${{ inputs.jdk-version }}

      - name: Get current version and calculate release version
        run: |
          # Obtener la versión con -SNAPSHOT desde version.sbt
          currentVersion=$(awk '/(ThisBuild \/ )?version := / {print $NF}' version.sbt | sed 's/"//g')
          echo "CURRENT_VERSION=$currentVersion" >> $GITHUB_ENV

          # Calcular la versión de release (sin -SNAPSHOT)
          releaseVersion=$(echo "$currentVersion" | sed 's/-SNAPSHOT//g')
          echo "RELEASE_VERSION=$releaseVersion" >> $GITHUB_ENV

          echo "Current version: $currentVersion"
          echo "Release version: $releaseVersion"

      - name: Build (sbt assembly)
        run: sbt assembly
        # Este paso generará el JAR con el nombre que incluye -SNAPSHOT

      - name: Rename artifact
        run: |
          # Directorio donde sbt assembly guarda el JAR (target/scala-2.13 por defecto)
          # Ajusta la ruta si tu assembly lo guarda en otro lugar
          # Buscamos el archivo generado por assembly que contiene la CURRENT_VERSION
          jarFile="${{ inputs.build_path }}/scala-2.13/${{ inputs.name }}-${{ env.CURRENT_VERSION }}${{ inputs.artifact_extension }}"
          newJarFile="${{ inputs.build_path }}/${{ inputs.name }}-${{ env.RELEASE_VERSION }}${{ inputs.artifact_extension }}"

          echo "Renaming $jarFile to $newJarFile"
          mv "$jarFile" "$newJarFile"
          ls ${{ inputs.build_path }}/ # Listar para verificar el renombre

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.SYSADMIN_PAT }}
          branch: ${{ github.ref }}
          tags: true # Empujar tags creados por release-drafter
          # force: true # Considera si realmente necesitas force push

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{inputs.name}}-${{env.RELEASE_VERSION}}${{inputs.artifact_extension}}"
          # Usamos la ruta del archivo renombrado
          path: "${{inputs.build_path}}/${{inputs.name}}-${{env.RELEASE_VERSION}}${{inputs.artifact_extension}}"
          retention-days: 1
          if-no-files-found: error

      - name: Publish hotfix notes
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          publish: true
          prerelease: false
          commitish: main # O la rama base de tu hotfix si no es main
          name: "v${{ env.RELEASE_VERSION }}"
          tag: "v${{ env.RELEASE_VERSION }}"
          version: "v${{ env.RELEASE_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: PR to main
        uses: vsoch/pull-request-action@1.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.SYSADMIN_PAT }}
          # PULL_REQUEST_FROM_BRANCH: ${{ github.ref }} # Ya usa la rama actual por defecto
          PULL_REQUEST_BRANCH: "main"
          PULL_REQUEST_TITLE: "[hotfix] Update main from ${{ env.RELEASE_VERSION }}"
          PULL_REQUEST_BODY: "**ALERTA**: Siempre que se resuelva conflictos se debe aceptar la version **#.#.#-SNAPSHOT** de main"
          # ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true' # Esta opción está obsoleta y debe evitarse

  deploy:
    runs-on: ubuntu-latest
    if: always() && contains(join(needs.*.result, ','), 'success')
    needs: [ default-release, hotfix-release ]
    timeout-minutes: 10
    env:
      TZ: America/Montevideo
      NEXUS_USER: ${{ secrets.NEXUS_USER }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    steps:
      - name: Checkout / Setup JDK / sbt-cache
        uses: BQN-UY/action_checkout_jdk_sbt-cache@main
        with:
          token: ${{ secrets.SYSADMIN_PAT }}
          jdk-version: ${{ inputs.jdk-version }}

      - name: Get release version for deploy
        run: |
          # Obtener la versión con -SNAPSHOT desde version.sbt
          currentVersion=$(awk '/(ThisBuild \/ )?version := / {print $NF}' version.sbt | sed 's/"//g')
          # Calcular la versión de release (sin -SNAPSHOT)
          releaseVersion=$(echo "$currentVersion" | sed 's/-SNAPSHOT//g')
          echo "VERSION=$releaseVersion" >> $GITHUB_ENV # Usamos VERSION para compatibilidad con pasos posteriores

          echo "Deploy version: $releaseVersion"


      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          # Descargamos usando la versión de release (sin -SNAPSHOT)
          name: "${{inputs.name}}-${{env.VERSION}}${{inputs.artifact_extension}}"
          path: "${{inputs.build_path}}/"
          retention-days: 1
          if-no-files-found: error

      - name: Storage Jar
        uses: Pendect/action-rsyncer@v2.0.0
        env:
          DEPLOY_KEY: ${{secrets.DEPLOY_KEY}}
        with:
          flags: '-avz --delete'
          options: ''
          ssh_options: '-p ${{secrets.DEPLOY_PORT}}'
          # Usamos la ruta del archivo renombrado/descargado
          src: '${{inputs.build_path}}/${{inputs.name}}-${{env.VERSION}}${{ inputs.artifact_extension }}'
          dest: '${{ secrets.DEPLOY_USER }}@${{secrets.DEPLOY_IP}}:${{ secrets.PUBLISHER_PATH }}/${{inputs.name}}/versiones/${{inputs.name}}-${{env.VERSION}}.jar'

      - name: Executing deloy script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_IP }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            # Curl para el crumbs
            crumb=$(curl -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}" -s '${{ secrets.JENKINS_URL }}/crumbIssuer/api/json')
            # Curl para ejecutar
            curl -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}" -H "$crumb" -X POST '${{ secrets.JENKINS_URL }}/${{ secrets.JENKINS_DEPLOY_JOB }}/buildWithParameters?SISTEMA=${{inputs.name}}&VERSION=${{env.VERSION}}'

